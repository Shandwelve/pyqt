[project]
name = "pythonproject7"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "openpyxl>=3.1.5",
    "pyinstaller>=6.14.0",
    "pymupdf>=1.26.1",
    "pyqt6>=6.9.0",
    "python-dateutil>=2.9.0.post0",
    "python-doctr[torch]>=0.10.0",
    "regex>=2024.11.6",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "ruff>=0.11.13",
]

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [".venv", ".git", ".idea"]

[tool.ruff.lint]
preview = true
select = [
    "E", # General errors (PEP8 compliance)
    "F", # Pyflakes errors (unused imports, undefined variables)
    "I", # Import-related errors (import order, isort compliance)
    "B", # flake8-bugbear warnings (common Python pitfalls)
    "C90", # Cyclomatic complexity warnings (overly complex code)
    "Q", # flake8-Quotes (consistent use of single/double quotes)
    "N", # Naming conventions (CamelCase for classes, etc.)
    "T", # Type checking errors (missing type hints)
    "W", # pycodestyle warnings (trailing whitespace, line length)
    "ANN", # Annotations (missing or incorrect type annotations)
    "F401", # Checks for unused imports
    "E252", # Checks for missing whitespace around the equals,
    "E501",
]

ignore = [
    "ANN101", # ANN101 Missing type annotation for self in method
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ANN002", # Checks that function *args arguments have type annotations
    "ANN003", # Checks that function **kwargs arguments have type annotations
    "ANN102", # Checks that class method cls arguments have type annotations
    "F821", # Import name in quotes "ExampleClass" not defined
    "E722", # Checks for bare except catches in try-except statements
    "N802", # Checks for functions names that do not follow the naming convention
    "C901", # Checks for functions with a high McCabe complexity
]

